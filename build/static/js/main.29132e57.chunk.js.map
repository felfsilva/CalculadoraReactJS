{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["components_Button","props","react_default","a","createElement","onClick","e","click","label","className","concat","operation","double","triple","components_Display","value","initialState","displayValue","clearDisplay","values","current","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","clearMemory","bind","assertThisInitialized","addDigit","setOperation","setState","currentValue","equals","currentOperation","toConsumableArray","parseInt","n","includes","i","newValue","parseFloat","Component","Boolean","window","location","hostname","match","ReactDOM","render","Calculator_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29132e57.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props => \r\n<button \r\nonClick={e => props.click && props.click(props.label)}\r\nclassName={`\r\n        button\r\n        ${props.operation ? 'operation': ''}\r\n        ${props.double ? 'double': ''}\r\n        ${props.triple ? 'triple': ''}\r\n    `}>\r\n\r\n    {props.label}\r\n\r\n</button>","import React from 'react'\r\nimport './Display.css'\r\n\r\nexport default props => \r\n    <div className=\"display\">{props.value}</div>","import React, {Component} from 'react'\r\nimport './Calculator.css'\r\nimport Button from '../components/Button'\r\nimport Display from '../components/Display'\r\n\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0,0],\r\n    current: 0\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    state = {...initialState}\r\n\r\n    constructor(props) {\r\n        super(props) \r\n            this.clearMemory = this.clearMemory.bind(this)\r\n            this.addDigit = this.addDigit.bind(this)\r\n            this.setOperation = this.setOperation.bind(this)\r\n            }\r\n\r\n    clearMemory() {\r\n       this.setState({...initialState})\r\n    }\r\n\r\n    setOperation(operation) {\r\n        if (this.state.currentValue === 0) {\r\n            this.setState({operation, current:1, clearDisplay:true})\r\n        } else {\r\n            const equals = operation === '='\r\n            const currentOperation = this.state.operation\r\n\r\n            const values = [...this.state.values]\r\n\r\n            switch(currentOperation) {\r\n                case \"+\": \r\n                values[0] = (parseInt(values[0]) + parseInt(values[1]))\r\n                break;\r\n                case \"-\":\r\n                values[0] = (parseInt(values[0]) - parseInt(values[1]))\r\n                break;\r\n                case \"/\":\r\n                values[0] = (parseInt(values[0]) / parseInt(values[1]))\r\n                break;\r\n                case \"*\":\r\n                values[0] = (parseInt(values[0]) * parseInt(values[1]))\r\n                break;\r\n                default: values[0] = this.state.values[0]\r\n                \r\n            }\r\n            \r\n            // try {\r\n            // values[0] = eval (`${values[0]} ${currentOperation} ${values[1]}`)\r\n            // } catch(e) {\r\n            //     values[0] = this.state.values[0]\r\n            // }\r\n            // values[1] = 0\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n                values\r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit(n) {\r\n        if(n === '.' && this.state.displayValue.includes('.')) {\r\n            return \r\n        }\r\n        const clearDisplay = this.state.displayValue === '0'\r\n        || this.state.clearDisplay\r\n\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n        const displayValue = currentValue + n \r\n\r\n        this.setState({displayValue, clearDisplay: false})\r\n\r\n        if (n !== '.') {\r\n            const i = this.state.current\r\n            const newValue = parseFloat(displayValue)\r\n            const values = [...this.state.values]\r\n            values[i] = newValue\r\n            this.setState({values})\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n              return (\r\n            <div className='calculator' >\r\n            <Display value={this.state.displayValue}/>\r\n            <Button label=\"AC\" click={this.clearMemory} triple />\r\n            <Button label=\"/\" click={this.setOperation} operation/>\r\n            <Button label=\"7\" click={this.addDigit} />\r\n            <Button label=\"8\" click={this.addDigit}/>\r\n            <Button label=\"9\" click={this.addDigit}/>\r\n            <Button label=\"*\" click={this.setOperation} operation/>\r\n            <Button label=\"4\" click={this.addDigit}/>\r\n            <Button label=\"5\" click={this.addDigit}/>\r\n            <Button label=\"6\" click={this.addDigit}/>\r\n            <Button label=\"-\" click={this.setOperation} operation/>\r\n            <Button label=\"1\" click={this.addDigit}/>\r\n            <Button label=\"2\" click={this.addDigit}/>\r\n            <Button label=\"3\" click={this.addDigit}/>\r\n            <Button label=\"+\" click={this.setOperation} operation/>\r\n            <Button label=\"0\" click={this.addDigit} double/>\r\n            <Button label=\".\" click={this.addDigit}/>\r\n            <Button label=\"=\" click={this.setOperation} operation/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div> <h1>Calculadora</h1>\n    <Calculator />\n    </div>\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}